# DRAWING AND COLORING SHAPES WITH P5.JS
----------------------------------------

* Drawing and Coloring Shapes
-----------------------------
<1 min
We’ve learned a lot about what happens in the background when a p5.js sketch starts! The setup() function is automatically called, creating an HTML <canvas> element in our index.html. 
Now, let’s learn how to use the p5.js library to draw two-dimensional shapes!

The p5.js sketch, or HTML <canvas> element, is a native HTML element that can be dynamically drawn to using JavaScript. The p5.js library provides a suite of drawing functions for common 
shapes and graphics that simplifies interacting with the canvas. In this lesson, we will explore the coordinate system that the canvas uses, p5.js shape and style functions, and how to 
create patterns using for loops.

In this this lesson, we will introduce the following shape functions:

	. point() and line()

	. rect() and square()

	. ellipse() and circle()

	. triangle() and quad()

We will also introduce how to change the style of shapes using:

	. stroke() and strokeWeight()

	. fill() and no noFill()

Let’s start by learning about the coordinate system that p5.js canvas uses!

* Instructions
--------------
On the right is a p5.js sketch of a repeating pattern made up of simple lines and shapes. By the end of this lesson, you will learn how to create your own patterns of shapes!

Click “Next” to learn about the coordinate system that p5.js canvas uses.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The Coordinate System
-----------------------
1 min
You can think about the canvas as the graph paper that your p5.js sketch is drawn on. The canvas uses a two-dimensional grid with ordered pairs used to describe its space. The upper-left 
coordinate, or the origin, has the coordinate of (0, 0). The first entry of the ordered pair is used to describe the x-axis of the canvas or the distance of pixels from the left edge of 
the canvas. The second entry of the ordered pair describes the y-axis or the distance of pixels from the top edge of the canvas.

The convention of coordinates makes it easy to construct complex patterns and shapes using mathematical properties of graph systems.

* Instructions
--------------
Explore the interactive sketch on the right to understand the coordinate system of the p5.js canvas.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Point and Line
----------------
7 min
The p5.js library provides many built-in functions to interact with the canvas with easy-to-remember drawing functions for shapes. While you can call drawing functions in the setup() 
function, it is typical to use drawing functions in the eponymous draw() function. Let’s begin with the basics by drawing a point to the canvas!

The p5.js library provides the point() function, which draws a single pixel to the canvas. This function requires two arguments: an x coordinate for the horizontal position and a y 
coordinate for the vertical position of the point.

Diagram of point
The built-in line() function draws a direct path between two points. To draw a single line, we need four arguments: x and y coordinates of the starting point and x and y coordinates of 
the endpoint.

Diagram of line

* Instructions
--------------
Checkpoint 1 Passed
1.
Inside the draw() function, use the point() function to draw a pixel at the center of the 400px by 400px canvas.


Hint
You can draw a pixel to the p5.js sketch using the point() function with the following syntax:

point(x, y);

To draw a point at (100, 50), your code would be:

point(100, 50);

Checkpoint 2 Passed
2.
Next, try drawing a point that is 100 pixels to the left of the center point.


Hint
The x coordinate describes the canvas from left to right in pixels. Try subtracting 100 from the x position of the center of the canvas.

Checkpoint 3 Passed
3.
Great! Now let’s practice drawing lines! Use the line() function to draw a diagonal line between two points at coordinates (20, 40) and (320, 120).


Hint
Lines are drawn with the line() function, which takes 4 arguments. The function uses the following syntax:

line(x1, y1, x2, y2);

To draw a line from (100, 50) to (300, 200), your code would look like this:

line(100, 50, 300, 200);

Checkpoint 4 Passed
4.
Draw a vertical line that goes across the center of your canvas. This line will equally divide the left and right sides of your canvas.


Hint
The x coordinates for the two endpoints of a vertical line is the same. The y coordinate of one endpoint is at the top of the canvas, and the other is at the bottom of the canvas.

It’s p5.js convention to use the numbers provided in the createCanvas() function when referring to the full width or height of the canvas.

Checkpoint 5 Passed
5.
Lastly, draw a diagonal line that starts at the bottom left corner and ends at the top right corner of your canvas.


Hint
Remember that the width and height of the canvas are 400 pixels and the origin (0, 0) of the canvas is at the top-left corner. This means that the coordinates of the bottom-right corner 
of the canvas are (400, 400).

sketch.js
---------
function setup(){
  // Your setup code goes here
  createCanvas(400, 400);
  background(200);
}

function draw(){
  // Your drawing code goes here 
  // TODO: Draw a point at the center of the canvas
  point(200, 200);
  // TODO: Draw a point 100px to the left of the center
  point(100, 200);
  // TODO: Draw a line between (20, 40) and (320, 120)
  line(20, 40, 320, 120);
  // TODO: Draw a vertical line
  line(200, 0, 200, 400);
  // TODO: Draw a diagonal line
  line(0, 400, 400, 0);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Square and Rectangle
----------------------
4 min
Let’s look at our first closed shape, the rectangle! Did you know that there are more rectangular shapes in the world than any other shapes?

Rectangles can be drawn to the p5.js sketch using the rect() function. The function has four parameters, the first and second parameters are the x and y coordinates for the top-left 
corner of the shape, and the third and fourth parameters set the width and height of the rectangle.

Diagram of rectangle

A square is a special type of rectangle where the height is the same length as the width. They are drawn using the square() function and need three parameters: x and y coordinates for the 
top-left corner of the square and the width.

Diagram of square

The x and y coordinates for the rect() and square() functions are also known as the anchor point, which is the origin of all transformations. By default, rectangles and squares anchor at 
the top-left corner of the shape. For now, you can think of the anchor point as the coordinates where shapes are drawn to. The location of the anchor point and how parameters of the 
rect() and square() functions are interpreted can be changed using the rectMode() function, which will be covered in detail in the Grouping and Transforming Shapes lesson.

* Instructions
--------------
Checkpoint 1 Passed
1.
Use the rect() function to draw a rectangle in the upper-left quadrant of the p5.js sketch, positioned at (30, 20), with a width of 100 pixels and a height of 200 pixels. Remember that 
rectangles are positioned by their upper-left corner.


Hint
Rectangles require four arguments when called and uses the following syntax:

rect(x, y, rectWidth, rectHeight);

To draw a rectangle at (50, 100) where width is 200 pixels and height is 300 pixels, your code would look like this:

rect(50, 100, 200, 300);

Checkpoint 2 Passed
2.
Next, draw a 100px wide square to the right of the rectangle. Position the square with the top left corner at (250, 100).


Hint
Squares are drawn with the square() function like below:

square(x, y, squareWidth);

To draw a square at (50, 100) where width and height are 300 pixels, your code would look like this:

square(50, 100, 300);

sketch.js
---------
function setup(){
  createCanvas(400, 400);
  background(200);
}

function draw(){
  // Your drawing code goes here
  // TODO: Draw a rectangle at (30, 20), 100px width and 200px height
  rect(30, 20, 100, 200);
  // TODO: Draw a square at (250, 100) and 100px width
  square(250, 100, 100);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------






















































































































