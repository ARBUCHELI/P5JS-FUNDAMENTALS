# DRAWING AND COLORING SHAPES WITH P5.JS
----------------------------------------

* Drawing and Coloring Shapes
-----------------------------
<1 min
We’ve learned a lot about what happens in the background when a p5.js sketch starts! The setup() function is automatically called, creating an HTML <canvas> element in our index.html. 
Now, let’s learn how to use the p5.js library to draw two-dimensional shapes!

The p5.js sketch, or HTML <canvas> element, is a native HTML element that can be dynamically drawn to using JavaScript. The p5.js library provides a suite of drawing functions for common 
shapes and graphics that simplifies interacting with the canvas. In this lesson, we will explore the coordinate system that the canvas uses, p5.js shape and style functions, and how to 
create patterns using for loops.

In this this lesson, we will introduce the following shape functions:

	. point() and line()

	. rect() and square()

	. ellipse() and circle()

	. triangle() and quad()

We will also introduce how to change the style of shapes using:

	. stroke() and strokeWeight()

	. fill() and no noFill()

Let’s start by learning about the coordinate system that p5.js canvas uses!

* Instructions
--------------
On the right is a p5.js sketch of a repeating pattern made up of simple lines and shapes. By the end of this lesson, you will learn how to create your own patterns of shapes!

Click “Next” to learn about the coordinate system that p5.js canvas uses.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The Coordinate System
-----------------------
1 min
You can think about the canvas as the graph paper that your p5.js sketch is drawn on. The canvas uses a two-dimensional grid with ordered pairs used to describe its space. The upper-left 
coordinate, or the origin, has the coordinate of (0, 0). The first entry of the ordered pair is used to describe the x-axis of the canvas or the distance of pixels from the left edge of 
the canvas. The second entry of the ordered pair describes the y-axis or the distance of pixels from the top edge of the canvas.

The convention of coordinates makes it easy to construct complex patterns and shapes using mathematical properties of graph systems.

* Instructions
--------------
Explore the interactive sketch on the right to understand the coordinate system of the p5.js canvas.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Point and Line
----------------
7 min
The p5.js library provides many built-in functions to interact with the canvas with easy-to-remember drawing functions for shapes. While you can call drawing functions in the setup() 
function, it is typical to use drawing functions in the eponymous draw() function. Let’s begin with the basics by drawing a point to the canvas!

The p5.js library provides the point() function, which draws a single pixel to the canvas. This function requires two arguments: an x coordinate for the horizontal position and a y 
coordinate for the vertical position of the point.

Diagram of point
The built-in line() function draws a direct path between two points. To draw a single line, we need four arguments: x and y coordinates of the starting point and x and y coordinates of 
the endpoint.

Diagram of line

* Instructions
--------------
Checkpoint 1 Passed
1.
Inside the draw() function, use the point() function to draw a pixel at the center of the 400px by 400px canvas.


Hint
You can draw a pixel to the p5.js sketch using the point() function with the following syntax:

point(x, y);

To draw a point at (100, 50), your code would be:

point(100, 50);

Checkpoint 2 Passed
2.
Next, try drawing a point that is 100 pixels to the left of the center point.


Hint
The x coordinate describes the canvas from left to right in pixels. Try subtracting 100 from the x position of the center of the canvas.

Checkpoint 3 Passed
3.
Great! Now let’s practice drawing lines! Use the line() function to draw a diagonal line between two points at coordinates (20, 40) and (320, 120).


Hint
Lines are drawn with the line() function, which takes 4 arguments. The function uses the following syntax:

line(x1, y1, x2, y2);

To draw a line from (100, 50) to (300, 200), your code would look like this:

line(100, 50, 300, 200);

Checkpoint 4 Passed
4.
Draw a vertical line that goes across the center of your canvas. This line will equally divide the left and right sides of your canvas.


Hint
The x coordinates for the two endpoints of a vertical line is the same. The y coordinate of one endpoint is at the top of the canvas, and the other is at the bottom of the canvas.

It’s p5.js convention to use the numbers provided in the createCanvas() function when referring to the full width or height of the canvas.

Checkpoint 5 Passed
5.
Lastly, draw a diagonal line that starts at the bottom left corner and ends at the top right corner of your canvas.


Hint
Remember that the width and height of the canvas are 400 pixels and the origin (0, 0) of the canvas is at the top-left corner. This means that the coordinates of the bottom-right corner 
of the canvas are (400, 400).

sketch.js
---------
function setup(){
  // Your setup code goes here
  createCanvas(400, 400);
  background(200);
}

function draw(){
  // Your drawing code goes here 
  // TODO: Draw a point at the center of the canvas
  point(200, 200);
  // TODO: Draw a point 100px to the left of the center
  point(100, 200);
  // TODO: Draw a line between (20, 40) and (320, 120)
  line(20, 40, 320, 120);
  // TODO: Draw a vertical line
  line(200, 0, 200, 400);
  // TODO: Draw a diagonal line
  line(0, 400, 400, 0);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Square and Rectangle
----------------------
4 min
Let’s look at our first closed shape, the rectangle! Did you know that there are more rectangular shapes in the world than any other shapes?

Rectangles can be drawn to the p5.js sketch using the rect() function. The function has four parameters, the first and second parameters are the x and y coordinates for the top-left 
corner of the shape, and the third and fourth parameters set the width and height of the rectangle.

Diagram of rectangle

A square is a special type of rectangle where the height is the same length as the width. They are drawn using the square() function and need three parameters: x and y coordinates for the 
top-left corner of the square and the width.

Diagram of square

The x and y coordinates for the rect() and square() functions are also known as the anchor point, which is the origin of all transformations. By default, rectangles and squares anchor at 
the top-left corner of the shape. For now, you can think of the anchor point as the coordinates where shapes are drawn to. The location of the anchor point and how parameters of the 
rect() and square() functions are interpreted can be changed using the rectMode() function, which will be covered in detail in the Grouping and Transforming Shapes lesson.

* Instructions
--------------
Checkpoint 1 Passed
1.
Use the rect() function to draw a rectangle in the upper-left quadrant of the p5.js sketch, positioned at (30, 20), with a width of 100 pixels and a height of 200 pixels. Remember that 
rectangles are positioned by their upper-left corner.


Hint
Rectangles require four arguments when called and uses the following syntax:

rect(x, y, rectWidth, rectHeight);

To draw a rectangle at (50, 100) where width is 200 pixels and height is 300 pixels, your code would look like this:

rect(50, 100, 200, 300);

Checkpoint 2 Passed
2.
Next, draw a 100px wide square to the right of the rectangle. Position the square with the top left corner at (250, 100).


Hint
Squares are drawn with the square() function like below:

square(x, y, squareWidth);

To draw a square at (50, 100) where width and height are 300 pixels, your code would look like this:

square(50, 100, 300);

sketch.js
---------
function setup(){
  createCanvas(400, 400);
  background(200);
}

function draw(){
  // Your drawing code goes here
  // TODO: Draw a rectangle at (30, 20), 100px width and 200px height
  rect(30, 20, 100, 200);
  // TODO: Draw a square at (250, 100) and 100px width
  square(250, 100, 100);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Circle and Ellipse
--------------------
3 min
The next shapes that we’ll look at are some of the most popular shapes in modern architecture—ellipses and circles!

The ellipse() function is similar to the rect() function in requiring four parameters when called. The first and second parameters are the x and y location of where the ellipse is drawn 
to, but instead of the corner, ellipses are positioned by their center! The third parameter sets the width or the diameter along the x-axis of the canvas, and the fourth parameter is the 
diameter along the y-axis.

Diagram of ellipse

A circle is a special case of ellipse where the height is equal to the width of the circle. The circle() function has three parameters: the x and y coordinates for the center, and the 
width, or the diameter of the circle.

Diagram of circle

The way that the parameters for the circle() and ellipse() functions are interpreted can also be changed with the ellipseMode() function, which will be covered in detail in the Grouping and Transforming Shapes lesson.

* Instructions
--------------
Checkpoint 1 Passed
1.
Use the ellipse() function to draw an ellipse to the sketch with the center position at (150, 200) and the width of 150 pixels, and the height of 100 pixels.


Hint
Ellipses are drawn to the p5.js sketch using the center of the ellipse as the anchor point. The syntax of the ellipse() function is:

ellipse(x, y, ellipseWidth, ellipseHeight);

To draw an ellipse at (100, 50) where width is 200 pixels and height is 300 pixels, you would write:

ellipse(100, 50, 200, 300);

Checkpoint 2 Passed
2.
Next to the ellipse that you just drew, draw a circle with a width of 75px and positioned at (300, 150).


Hint
The circle() function uses the following syntax:

circle(x, y, circleWidth);

To draw a circle at (100, 50) where width and height are 300 pixels, your code would look like this:

circle(100, 50, 300);

sketch.js
---------
function setup(){
  createCanvas(400, 400);
  background(200);
}

function draw(){
  // Your drawing code goes here
  // TODO: Draw an ellipse at (150, 200), 150px width and 100px height
  ellipse(150, 200, 150, 100);
  // TODO: Draw a circle at (300, 150) and 75px width
  circle(300, 150, 75);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Triangle and Quad
-------------------
9 min
The last two drawing functions we’ll learn are triangle() and quad(), which are closely related to the line() function in that they take the coordinates of each corner of the shape as 
arguments. These arguments are used to define the perimeter of the shape.

The triangle() function takes a total of six arguments or three pairs of x and y coordinates.

Diagram of triangle function

The quadrilateral shape function, quad(), needs eight arguments, or four pairs of x and y coordinates for each of its four points.

Diagram of quadrilateral

* Instructions
--------------
Checkpoint 1 Passed
1.
Use the triangle() function to draw a triangle to the p5.js sketch. You can use any coordinates for each of the three vertices of the triangle!


Hint
The triangle() function uses the following syntax:

triangle(x1, y1, x2, y2, x3, y3);

To draw a triangle where the first vertex is at (100, 50), second at (40, 150), and third at (160, 175), you would write:

triangle(100, 50, 40, 150, 160, 175);

Checkpoint 2 Passed
2.
The arguments for the triangle() function represent the vertices of the triangle. Draw a second triangle that shares one vertex with the first triangle you drew.


Hint
Make sure to use the coordinates of one of the vertices of the triangle you just drew. For example, if your first triangle’s vertices are at (100, 50), (40, 150), and (160, 175), you 
should use any of the x and y position pair as one of the vertices for the new triangle.

Checkpoint 3 Passed
3.
Next, draw a quadrilateral using the quad() function. You can use any coordinates for each of the four vertices of the quadrilateral!


Hint
The quad() function uses the following syntax:

quad(x1, y1, x2, y2, x3, y3, x4, y4);

To draw a quadrilateral where the first vertex is at (100, 50), second at (40, 150), third at (160, 175), and fourth at (200, 130), you would write:

quad(100, 50, 40, 150, 160, 175, 200, 130);

Checkpoint 4 Passed
4.
Draw a second quadrilateral that shares one vertex with the first quadrilateral you drew.


Hint
Make sure to use the coordinates of one of the vertices of the quadrilateral you just drew. For example, if your first quadrilateral’s vertices are at (100, 50), (40, 150), (160, 175), 
and (200, 130), you should use any of the x and y position pair as one of the vertices for the new quadrilateral.

sketch.js
---------
function setup(){
  createCanvas(400, 400);
  background(200);
}

function draw(){
  // Your drawing code goes here
  // TODO: Draw a triangle
  triangle(100, 50, 200, 100, 100, 100);
  // TODO: Draw a triangle that shares one vertex with the one above
  triangle(200, 100, 300, 150, 200, 150);
  // TODO: Draw a quadrilateral
  quad(100, 400, 200, 450, 200, 500, 50, 500);
  // TODO: Draw a quadrilateral that shares one vertex with the one above
  quad(50, 500, 250, 550, 250, 600, 50, 600);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Dynamically Sizing Shapes
---------------------------
13 min
So far, we’ve only been using static values as arguments when drawing shapes. However, you can use dynamic values to create drawings that adjust to a canvas’s width and height. With 
dynamic values, you don’t have to keep track of the exact values of your arguments—they will automatically adjust for you!

Before using variables for our drawings, it’s helpful to know that drawing function arguments can use operators like +, -, *, and /, to calculate the values. Consider the following:

ellipse(40, 100, 40, 60);

Above code can be rewritten using operators:

ellipse(20 + 20, 120 - 20, 20 * 2, 120/2);

This might not seem like much now, but in a bit, you will see how powerful using operators can be.

p5.js also allows you to use variables as function arguments. The p5.js library provides useful built-in variables, including width and height that store the width and height of the p5.js 
canvas.

Consider this ellipse drawn using static values:

function setup(){
   createCanvas(400, 400);
}

function draw(){
   ellipse(200, 200, 400, 400);
}

If you were to resize the canvas while keeping the same dimensions for the ellipse, you would have to change the values of the createCanvas() function and then change the four arguments 
of the ellipse() function.

Instead, you can provide built-in variables as arguments to the ellipse() function, so that values will automatically change based on the canvas dimensions.

function setup(){
   createCanvas(400, 400);
}

function draw() {
  ellipse(width/2, height/2, width, height);
}

The biggest change here is using the width and height variables to calculate the position and size of the ellipse. width/2 gives you the horizontal center of the canvas, and height/2 
gives you the vertical center. Similarly, width returns the full width of the canvas and height of the canvas.

Now, to change the size of the canvas and keep the relative size and position of the ellipse, you would only have to change the arguments of the createCanvas() function. You don’t have to 
change anything else because the value of the width and height variables will automatically change.

* Instructions
--------------
Checkpoint 1 Passed
1.
Replace the static width value for all four circles with the circleWidth variable.


Hint
Replace the constant width of 50 given as the third argument of the circle() function with the circleWidth variable.

Checkpoint 2 Passed
2.
Reposition each circle so that they are at the center of each quadrant of the canvas. Calculate the positions using the width and height variables.


Hint
To dynamically calculate the x and y positions using the width and height variables, think about where the circles should go in proportion to the canvas’s width and height. For example, 
to draw the circle at the center of the top right quadrant, the x coordinate would be three-quarters of the canvas width, and the y coordinate would be one-quarter of the canvas height.

sketch.js
---------
let  circleWidth = 100;

function setup() {
  createCanvas(400, 400);
  background(220);
  
  line(width/2, 0, width/2, height);
  line(0, height/2, width, height/2);  
}

function draw() {
  
  // TODO: Move circle to top-left quadrant
  circle(width/4, height/4, circleWidth);
  
  // TODO: Move circle to top-right quadrant
  circle(3*width/4, height/4, circleWidth);
  
  // TODO: Move circle to bottom-left quadrant
  circle(width/4, height - height/4, circleWidth);
  
  // TODO: Move circle to bottom-right quadrant
  circle(width - width/4, height - height/4, circleWidth);
  
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------
















































































































































































































