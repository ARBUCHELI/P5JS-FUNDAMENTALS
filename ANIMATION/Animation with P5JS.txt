# ANIMATION WITH P5.JS
----------------------

* Introduction
--------------
1 min
Now that you know how to draw a static sketch in p5.js, it is natural to wonder, “How can I make it move?”

In this lesson, you will learn how to make a p5.js drawing that changes with time, also known as an animation. An animation is really just an illusion. Any time we see an animation, we 
are actually seeing a sequence of frames that give us the illusion of movement. Frames are individual pictures in a sequence of images. When multiple frames are shown at a fast enough 
rate, our eyes translate and blend them into a single moving image. A classic example is Eadweard Muybridge’s Horse in Motion, in which the photographer took 12 photos of a galloping 
horse in rapid succession.

Eadweard Muybridge horse frames

When you show the pictures one after the other, it creates a motion-picture!

Eadweard Muybridge horse animated

In p5.js, this illusion of creating a moving image can be easily achieved by utilizing essential principles and functions such as the draw() loop, frames, and frame rates. In order to 
have control over your animation’s speed and states, it will be important to understand how to increment or decrement values, change variables, create your own functions, and use 
conditional statements.

By the end of this lesson, you will be able to make your p5.js drawings come to life!

* Instructions
--------------
Explore the p5.js sketch of this spaceship scene. Pay attention to the frameRate() function, the random() function, incrementing or decrementing values, creating custom functions, and 
writing conditional statements.

Click “Next” when you are ready to get started making p5.js animations!

sketch.js
---------
let x = 0; // Starting position for x
let y = 300; // Starting position for y
let size = 85; 
let speed = 5; 

function setup() {
  createCanvas(windowWidth, windowHeight);
  frameRate(32); // Slower frame rate
  noStroke();
}

function draw() {
  background(0);
  drawMoon(); 
  spaceship(x, y, size);

  if (x > width + 100) {
    x = -50; // Reset x position 
    y = random(0, height); // Reset at a random y position
  }
  x = x + speed; // Increment x position
}

// Custom function to draw the moon
function drawMoon() {
  // Moon
  fill(80);
  ellipse(width / 2, height / 2, width / 1.145);

  // Crater
  fill(0, 30);
  ellipse(width / 2 + width / 4, height / 2 - width / 4, width / 2);

  // Crater
  fill(0, 30);
  ellipse(width / 2 - width / 4, height / 2 + width / 10, width / 6);

  // Crater
  fill(0, 30);
  ellipse(width / 2, height / 2 + width / 3, width / 3);
}

// Custom function to draw spaceship
function spaceship(x, y, size) {
  fill(255);
  
  // Wings
  triangle(x + 25, y - size / 4, x + size, y + size / 4, x + 25, y + size * 3 / 4);
  
  // Body
  rect(x, y, size, size / 2, 5);
  ellipse(x + size, y + size / 4, size, size / 2);
  
  // Windows
  fill(0);
  ellipse(x + size / 3, y + size / 4, size / 4);
  ellipse(x + size * 2 / 3, y + size / 4, size / 4);
  ellipse(x + size, y + size / 4, size / 4);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Frames
--------
9 min
In p5.js, multiple frames can easily be shown in a sequence using the draw() loop. By default, any code in the draw() function will repeat over and over again, many times per second. This 
function’s endless repetition is ideal for making an animation because we can write code in the draw() function that slightly alters our image each time it runs.

As a quick recap, the draw() function is similar to an endless for-loop that repeatedly runs the code block inside from top to bottom. The draw() function runs after the setup() function 
that runs only once at the program’s start.

function setup(){
  // Code inside setup() function runs once when you start the program
}
function draw(){
  // Code inside draw() function loops infinitely after setup() is run
}

It is helpful to think of an animation as a series of frames, like a film roll. By showing the series of frames fast enough, our brain is tricked into thinking the sequential images are 
an animation. The example below shows a series of frames shown like a film roll.

Series of Frames

To create a smooth animation with code, p5.js runs the draw loop at 60 frames per second. Below is an example of how each frame is overriding the previous one to create this animation.

Series of Frames

With p5.js, one frame is the equivalent to one loop through the draw() function. To keep track of the number of frames rendered, p5.js provides a built-in variable called frameCount. This 
variable counts the number of frames that have been displayed since the program started. The frameCount variable updates with every frame. The first time the draw() loop runs, the value 
of the frameCount is one; the second time the draw() loop runs, the frameCount is two; and so forth.

* Instructions
--------------
Checkpoint 1 Passed
1.
Below the line of code that sets fill color to white, draw an ellipse using the frameCount variable as the x position. Let the y position be height / 2. Set the width and height to be 300 
pixels. See how the ellipse moves from the left to right because the frameCount value increases with every frame.


Hint
Remember that the syntax for drawing an ellipse is as follows:

ellipse(x, y, ellipseWidth, ellipseHeight);

Make sure to draw the ellipse below the line that sets the fill color to white like below:

fill(255);

Checkpoint 2 Passed
2.
In the last line within the draw() function, draw text using the text() function. Set the first parameter to be the frameCount variable. Set the second parameter, which is the x location, 
to be width / 2. Set the third parameter, which is the y location, to be height / 2.

Notice how p5.js keeps track of the number of frames run since the program begins.


Hint
You can draw text to the p5.js canvas using the text() function with the following syntax:

text(word, x, y);

where word represents the text to be drawn and x and y respectively refer to the x and y position of the text.

sketch.js
---------
function setup() {
  createCanvas(windowWidth,windowHeight);
}

function draw() {
  background(0);

  //Draw moving ellipse
  fill(255);
  // TODO: draw an ellipse with frameCount as the x position
  ellipse(frameCount, height/2, 300, 300);

  //Draw text 
  fill(120); 
  textSize(72);
  textAlign(CENTER);

  // TODO: create text with frameCount displayed in sketch
  text(frameCount, width/2, height/2);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* FPS
-----
3 min
Frames Per Second (FPS) specifies the number of frames displayed every second. When the FPS of animation is lower, it looks like it is in slow motion. When the frame rate is higher, the 
animation looks like it is being fast-forwarded.

p5.js will automatically run your code at 60 frames per second. However, you can manipulate the FPS by using the frameRate() function, which will change the number of frames shown per 
second to the number specified as the function’s argument. For example, the code snippet below will cause the draw() function to run numberOfFrames times per second.

frameRate(numberOfFrames);

The frameRate() function will not go over 60 frames per second in p5.js. This is more than enough! A typical animation is between 24 to 30 frames per second.

Different FPS

In the diagram above, you can see the ball dropping at ten frames per second (10 FPS), 30 frames per second (30 FPS), and 60 frames per second (60 FPS). Notice that when the animation has 
a lower frame rate, each frame is more distinct.

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s play around with the frame rate to manipulate the speed the sketch is run at. Below the createCanvas() function, add a frame rate of 60 frames per second in the setup() function.


Hint
Use the frameRate() function in the setup() function to set the FPS of the sketch to 60.

Checkpoint 2 Passed
2.
Below the line you just added, set the frame rate to 24 frames per second.

Remember that code runs from top to bottom, so this new frame rate will override the frame rate we set in the above instruction. Notice the change in animation speed.


Hint
Below the line you set the frame rate to 60 FPS, use the frameRate() function to set frame rate to 24.

Checkpoint 3 Passed
3.
Below the line you just added, write a new frameRate() function and set it to run at 6 frames per second.

Notice how the animation has slowed down and now has a stop motion effect.


Hint
Below the line you set the frame rate to 24 FPS, use the frameRate() function to set the frame rate to 6.

sketch.js
---------
let yPos = 0;
let ySpeed = 5;

function setup() { 
  createCanvas(windowWidth, windowHeight);
  // TODO: Set the frame rate to be 60 FPS
  frameRate(60);
  // TODO: Set the frame rate to be 24 FPS
  frameRate(24);
  // TODO: Set the fram erate to be 6 FPS
  frameRate(6);
} 

function draw() { 
  background(0);
  fill(255);
  // Draws the ellipse
  ellipse(width/2, yPos, 100,100);
  
  // Moves the ellipse down the canvas
  yPos = yPos + ySpeed; 
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------















































































