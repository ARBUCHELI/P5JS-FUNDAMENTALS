# ANIMATION WITH P5.JS
----------------------

* Introduction
--------------
1 min
Now that you know how to draw a static sketch in p5.js, it is natural to wonder, “How can I make it move?”

In this lesson, you will learn how to make a p5.js drawing that changes with time, also known as an animation. An animation is really just an illusion. Any time we see an animation, we 
are actually seeing a sequence of frames that give us the illusion of movement. Frames are individual pictures in a sequence of images. When multiple frames are shown at a fast enough 
rate, our eyes translate and blend them into a single moving image. A classic example is Eadweard Muybridge’s Horse in Motion, in which the photographer took 12 photos of a galloping 
horse in rapid succession.

Eadweard Muybridge horse frames

When you show the pictures one after the other, it creates a motion-picture!

Eadweard Muybridge horse animated

In p5.js, this illusion of creating a moving image can be easily achieved by utilizing essential principles and functions such as the draw() loop, frames, and frame rates. In order to 
have control over your animation’s speed and states, it will be important to understand how to increment or decrement values, change variables, create your own functions, and use 
conditional statements.

By the end of this lesson, you will be able to make your p5.js drawings come to life!

* Instructions
--------------
Explore the p5.js sketch of this spaceship scene. Pay attention to the frameRate() function, the random() function, incrementing or decrementing values, creating custom functions, and 
writing conditional statements.

Click “Next” when you are ready to get started making p5.js animations!

sketch.js
---------
let x = 0; // Starting position for x
let y = 300; // Starting position for y
let size = 85; 
let speed = 5; 

function setup() {
  createCanvas(windowWidth, windowHeight);
  frameRate(32); // Slower frame rate
  noStroke();
}

function draw() {
  background(0);
  drawMoon(); 
  spaceship(x, y, size);

  if (x > width + 100) {
    x = -50; // Reset x position 
    y = random(0, height); // Reset at a random y position
  }
  x = x + speed; // Increment x position
}

// Custom function to draw the moon
function drawMoon() {
  // Moon
  fill(80);
  ellipse(width / 2, height / 2, width / 1.145);

  // Crater
  fill(0, 30);
  ellipse(width / 2 + width / 4, height / 2 - width / 4, width / 2);

  // Crater
  fill(0, 30);
  ellipse(width / 2 - width / 4, height / 2 + width / 10, width / 6);

  // Crater
  fill(0, 30);
  ellipse(width / 2, height / 2 + width / 3, width / 3);
}

// Custom function to draw spaceship
function spaceship(x, y, size) {
  fill(255);
  
  // Wings
  triangle(x + 25, y - size / 4, x + size, y + size / 4, x + 25, y + size * 3 / 4);
  
  // Body
  rect(x, y, size, size / 2, 5);
  ellipse(x + size, y + size / 4, size, size / 2);
  
  // Windows
  fill(0);
  ellipse(x + size / 3, y + size / 4, size / 4);
  ellipse(x + size * 2 / 3, y + size / 4, size / 4);
  ellipse(x + size, y + size / 4, size / 4);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Frames
--------
9 min
In p5.js, multiple frames can easily be shown in a sequence using the draw() loop. By default, any code in the draw() function will repeat over and over again, many times per second. This 
function’s endless repetition is ideal for making an animation because we can write code in the draw() function that slightly alters our image each time it runs.

As a quick recap, the draw() function is similar to an endless for-loop that repeatedly runs the code block inside from top to bottom. The draw() function runs after the setup() function 
that runs only once at the program’s start.

function setup(){
  // Code inside setup() function runs once when you start the program
}
function draw(){
  // Code inside draw() function loops infinitely after setup() is run
}

It is helpful to think of an animation as a series of frames, like a film roll. By showing the series of frames fast enough, our brain is tricked into thinking the sequential images are 
an animation. The example below shows a series of frames shown like a film roll.

Series of Frames

To create a smooth animation with code, p5.js runs the draw loop at 60 frames per second. Below is an example of how each frame is overriding the previous one to create this animation.

Series of Frames

With p5.js, one frame is the equivalent to one loop through the draw() function. To keep track of the number of frames rendered, p5.js provides a built-in variable called frameCount. This 
variable counts the number of frames that have been displayed since the program started. The frameCount variable updates with every frame. The first time the draw() loop runs, the value 
of the frameCount is one; the second time the draw() loop runs, the frameCount is two; and so forth.

* Instructions
--------------
Checkpoint 1 Passed
1.
Below the line of code that sets fill color to white, draw an ellipse using the frameCount variable as the x position. Let the y position be height / 2. Set the width and height to be 300 
pixels. See how the ellipse moves from the left to right because the frameCount value increases with every frame.


Hint
Remember that the syntax for drawing an ellipse is as follows:

ellipse(x, y, ellipseWidth, ellipseHeight);

Make sure to draw the ellipse below the line that sets the fill color to white like below:

fill(255);

Checkpoint 2 Passed
2.
In the last line within the draw() function, draw text using the text() function. Set the first parameter to be the frameCount variable. Set the second parameter, which is the x location, 
to be width / 2. Set the third parameter, which is the y location, to be height / 2.

Notice how p5.js keeps track of the number of frames run since the program begins.


Hint
You can draw text to the p5.js canvas using the text() function with the following syntax:

text(word, x, y);

where word represents the text to be drawn and x and y respectively refer to the x and y position of the text.

sketch.js
---------
function setup() {
  createCanvas(windowWidth,windowHeight);
}

function draw() {
  background(0);

  //Draw moving ellipse
  fill(255);
  // TODO: draw an ellipse with frameCount as the x position
  ellipse(frameCount, height/2, 300, 300);

  //Draw text 
  fill(120); 
  textSize(72);
  textAlign(CENTER);

  // TODO: create text with frameCount displayed in sketch
  text(frameCount, width/2, height/2);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* FPS
-----
3 min
Frames Per Second (FPS) specifies the number of frames displayed every second. When the FPS of animation is lower, it looks like it is in slow motion. When the frame rate is higher, the 
animation looks like it is being fast-forwarded.

p5.js will automatically run your code at 60 frames per second. However, you can manipulate the FPS by using the frameRate() function, which will change the number of frames shown per 
second to the number specified as the function’s argument. For example, the code snippet below will cause the draw() function to run numberOfFrames times per second.

frameRate(numberOfFrames);

The frameRate() function will not go over 60 frames per second in p5.js. This is more than enough! A typical animation is between 24 to 30 frames per second.

Different FPS

In the diagram above, you can see the ball dropping at ten frames per second (10 FPS), 30 frames per second (30 FPS), and 60 frames per second (60 FPS). Notice that when the animation has 
a lower frame rate, each frame is more distinct.

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s play around with the frame rate to manipulate the speed the sketch is run at. Below the createCanvas() function, add a frame rate of 60 frames per second in the setup() function.


Hint
Use the frameRate() function in the setup() function to set the FPS of the sketch to 60.

Checkpoint 2 Passed
2.
Below the line you just added, set the frame rate to 24 frames per second.

Remember that code runs from top to bottom, so this new frame rate will override the frame rate we set in the above instruction. Notice the change in animation speed.


Hint
Below the line you set the frame rate to 60 FPS, use the frameRate() function to set frame rate to 24.

Checkpoint 3 Passed
3.
Below the line you just added, write a new frameRate() function and set it to run at 6 frames per second.

Notice how the animation has slowed down and now has a stop motion effect.


Hint
Below the line you set the frame rate to 24 FPS, use the frameRate() function to set the frame rate to 6.

sketch.js
---------
let yPos = 0;
let ySpeed = 5;

function setup() { 
  createCanvas(windowWidth, windowHeight);
  // TODO: Set the frame rate to be 60 FPS
  frameRate(60);
  // TODO: Set the frame rate to be 24 FPS
  frameRate(24);
  // TODO: Set the fram erate to be 6 FPS
  frameRate(6);
} 

function draw() { 
  background(0);
  fill(255);
  // Draws the ellipse
  ellipse(width/2, yPos, 100,100);
  
  // Moves the ellipse down the canvas
  yPos = yPos + ySpeed; 
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Incrementing and Decrementing Values
--------------------------------------
8 min
Variables are a crucial component for creating movement in p5.js. To have your sketch change over time, you will need to increment or decrement your variables with each frame.

Remember that after you declare a variable, you can always reassign it by giving it a new value. In order to have your element move across the canvas, it is necessary to first define your 
variable, then reassign that variable to be incrementing and decrementing.

The code below shows how to increment an ellipse along the x-axis of the canvas.

// Initialize xPos variable to 5
let xPos = 5;

function draw(){
  // Use xPos variable as x position of ellipse
  ellipse(xPos, 100, 100, 100);
  // Increment xPos by 1 every draw loop
  xPos += 1; 
}

A value is incremented by writing the following expression:

x = x + 1;

Above, the x variable is taking its own value and then adding 1 to it. This expression can also be written as x++ or x += 1.

A value is decremented by writing the following expression:

x = x - 1;

Here, the x variable is taking its own value and then subtracting 1 from it. This expression can also be written as x-- or x -= 1. Keep in mind that the value 1 can be changed to any 
other number.

* Instructions
--------------
Checkpoint 1 Passed
1.
In this exercise, you will reassign variables in order to gradually change the size, color and position of the ellipse over time.

In the draw() loop underneath the fill() function, create an ellipse with the global variable xPos for the x position, height / 2 for the y position, and size for the width and the 
height.


Hint
Remember that you can create an ellipse with the following syntax:

ellipse(x, y, ellipseWidth, ellipseHeight);

Checkpoint 2 Passed
2.
In the line below the ellipse() function call, increment the color variable by 1.


Hint
You can increment a value by writing:

x += 1;

This takes the current value of the variable and then adds 1 to it.

You can also write the above expression as:

x = x + 1;

Checkpoint 3 Passed
3.
Now that we have incremented the ellipse’s color, let’s increment the size of the ellipse. Increment the size variable by 0.5.


Hint
You can increment a value by writing:

x += 1;

This takes the current value of the variable and then adds 1 to it.

You can also write the above expression as:

x = x + 1;

Checkpoint 4 Passed
4.
Let’s do the same for the x position of the ellipse. Reassign the xPos variable so it is decrementing by a value of 2.

Great job! The previously static sketch we started out with is now an animation with many elements changing over time.


Hint
You can decrement a value by writing:

x -= 1;

This takes the current value of the variable and then subtracts 1 from it.

You can also write the above expression as:

x = x - 1;

sketch.js
---------
let xPos = 0;
let color = 1;
let size = 1;

function setup() { 
  createCanvas(windowWidth, windowHeight);
  xPos = width;
} 

function draw() { 
  background(0);
  fill(color);

  // TODO: Draw an ellipse with xPos variable for the x position
  ellipse(xPos, height/2, size, size);
  // TODO: increment the color variable by 1
  color += 1;
  // TODO: increment the size variable by 0.5
  size += 0.5;
  // TODO: decrement the xPos variable by 2
  xPos -= 2;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Speed and Direction
---------------------
14 min
In order to create smooth animations, we need to create a variable for the speed and then incrementally change that value with each frame.

In the example below, we are animating an ellipse that is falling at a set speed. To achieve this, we first define a variable named speed. We then set a variable named yPos for the 
ellipse’s y position. Afterward, we increment yPos with the speed variable.

let speed = 1; // Determines the speed
let yPos = 0; // Starting position on y-axis

function draw(){
   ellipse(width / 2, yPos, 20, 20); 
   yPos += speed; // Increments the value of the y position
}

To reset the ellipse to its initial location, we first write an if statement to check whether the ball has reached the bottom of the canvas. You can tell if it has reached the bottom when 
the y position of the ball is greater than the height (yPos > height). At this point, reassign the y position of the ball back to 0, which is the top of the canvas.

if(yPos > height) {
  yPos = 0; // When yPos becomes greater than height, reset to 0
}

With the code above you can create this infinitely looping animation of a dropping ball.

Reset Ball

Instead of resetting the ball’s position to the top, you can have it bounce up when it reaches the bottom of the sketch. To move the ball in the opposite direction, inverse the speed 
variable by multiplying the value by -1.

if(yPos > height){
  speed = speed * -1; // Negative value changes speed to opposite direction
}

By inverting the direction of the speed, we have created an animation of a ball that bounces when it reaches the bottom.

Bouncing Ball

Let’s now try to have the ball bounce off all four sides of the canvas!

To achieve this, we first need to differentiate the speed for the x-axis and the y-axis movement. Let’s do this by creating variables called xSpeed and ySpeed to represent the movements 
along both axes.

// Initialize speed along x and y-axis to 1
let xSpeed = 1; 
let ySpeed = 1; 

Next, let’s write an if statement to check when the ellipse’s x position is greater than the canvas width or less than 0. We use an OR operator (||) to check if either condition is true.

if(xPos < 0 || xPos > width) {
  // If xPos is less than 0 or greater than width, run this code
}

We need to write another if statement to check when the ellipse’s y position is greater than the canvas height or less than 0.

if(yPos < 0 || yPos > height) {
  // If yPos is less than 0 or greater than height, run this code
}

When the ellipse touches any side of the canvas, we move it in the opposite direction by multiplying -1 to the variable representing speed. We write the code to change the direction 
within the if statements.

if(xPos < 0 || xPos > width) {
  xSpeed = xSpeed * -1; // Invert xSpeed when xPos is less than 0 or greater than width
}

if(yPos < 0 || yPos > height) {
  ySpeed = ySpeed * -1; // Invert ySpeed when yPos is less than 0 or greater than height
}

When we piece all the steps together it will create an animation of a ball bouncing around the canvas.

Bouncing Ball

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s practice controlling the speed and direction by creating a bouncing ball around the canvas. Note that the global variables are already defined for you at the top of the sketch.

Underneath the ellipse() function, increment the circleX variable, the x position of the ball, by a value of xSpeed. This will move your ball along the x-axis.


Hint
Remember that you can increment a value by writing:

x += amount;

This takes the current value of the variable and then adds amount to it.

Checkpoint 2 Passed
2.
Below the line you just added, increment the circleY variable, the y position of the ball, by a value of ySpeed. Your ball should now be gradually dropping diagonally.


Hint
Remember that you can increment a value by writing:

x += amount;

This takes the current value of the variable and then adds amount to it.

Checkpoint 3 Passed
3.
Now, let’s make the ball move in the opposite direction anytime it reaches the left and right sides of the canvas.

Below the increment statements you added, write an if statement that evaluates whether the circleX variable has become less than 0 or greater than the canvas width. If the ball has 
reached either end, invert the direction of the xSpeed.


Hint
Remember that you can use the OR operator (||) inside the if statement to check if one of the multiple statements is true.

You can invert the direction by multiplying the speed value by -1.

Checkpoint 4 Passed
4.
Lastly, write another if statement that evaluates whether the circleY variable has has become less than 0 or greater than the canvas height. If the ball has reached either side, invert 
the direction of the ySpeed.

Your ball should now bounce anytime it has reached any sides of the canvas.


Hint
Remember that you can use the OR operator (||) inside the if statement to check if one of the multiple statements is true.

You can invert the direction by multiplying the speed value by -1.

sketch.js
---------
// Global variables
let circleX = 300;
let circleY = 0;
let xSpeed = 1;
let ySpeed = 1;

function setup() {
  createCanvas(windowWidth, windowHeight);
}

function draw() {
  background(0);
  // Bouncing ball
  ellipse(circleX, circleY, 120);
  
  // TODO: Increment the x position of the ball
  circleX += xSpeed;

  // TODO: Increment the y position of the ball
  circleY += ySpeed;

  // TODO: If statment to inverse direction when ball hits left or right edge
  if (circleX < 0 || circleX > width) {
    xSpeed *= -1;
  }

  // TODO: If statment to inverse direction when ball hits top or bottom edge
  if (circleY < 0 || circleY > height) {
    ySpeed *= -1;
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------


































































































































